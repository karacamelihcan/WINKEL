//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Winkel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WinkelEntities : DbContext
    {
        public WinkelEntities()
            : base("name=WinkelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CATEGORY> CATEGORY { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TBLADMIN> TBLADMIN { get; set; }
        public virtual DbSet<TBLCITY> TBLCITY { get; set; }
        public virtual DbSet<TBLCUSTOMER> TBLCUSTOMER { get; set; }
        public virtual DbSet<TBLNOTIFICATION> TBLNOTIFICATION { get; set; }
        public virtual DbSet<TBLPRODUCT> TBLPRODUCT { get; set; }
        public virtual DbSet<TBLREAD> TBLREAD { get; set; }
        public virtual DbSet<TBLSALES> TBLSALES { get; set; }
        public virtual DbSet<TBLSELLER> TBLSELLER { get; set; }
        public virtual DbSet<TBLSTATUS> TBLSTATUS { get; set; }
        public virtual DbSet<TBLSTOCKSTATUS> TBLSTOCKSTATUS { get; set; }
        public virtual DbSet<TBLUNIT> TBLUNIT { get; set; }
    
        public virtual int ADDCATEGORY(string cATEGORYNAME)
        {
            var cATEGORYNAMEParameter = cATEGORYNAME != null ?
                new ObjectParameter("CATEGORYNAME", cATEGORYNAME) :
                new ObjectParameter("CATEGORYNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADDCATEGORY", cATEGORYNAMEParameter);
        }
    
        public virtual int ADDCUSTOMER(string cUSTOMERNAME, string cUSTOMERSURNAME, string cUSTOMEREMAIL, string cUSTOMERPASSWORD, string cUSTOMERCITY, string cUSTOMERPHOTO)
        {
            var cUSTOMERNAMEParameter = cUSTOMERNAME != null ?
                new ObjectParameter("CUSTOMERNAME", cUSTOMERNAME) :
                new ObjectParameter("CUSTOMERNAME", typeof(string));
    
            var cUSTOMERSURNAMEParameter = cUSTOMERSURNAME != null ?
                new ObjectParameter("CUSTOMERSURNAME", cUSTOMERSURNAME) :
                new ObjectParameter("CUSTOMERSURNAME", typeof(string));
    
            var cUSTOMEREMAILParameter = cUSTOMEREMAIL != null ?
                new ObjectParameter("CUSTOMEREMAIL", cUSTOMEREMAIL) :
                new ObjectParameter("CUSTOMEREMAIL", typeof(string));
    
            var cUSTOMERPASSWORDParameter = cUSTOMERPASSWORD != null ?
                new ObjectParameter("CUSTOMERPASSWORD", cUSTOMERPASSWORD) :
                new ObjectParameter("CUSTOMERPASSWORD", typeof(string));
    
            var cUSTOMERCITYParameter = cUSTOMERCITY != null ?
                new ObjectParameter("CUSTOMERCITY", cUSTOMERCITY) :
                new ObjectParameter("CUSTOMERCITY", typeof(string));
    
            var cUSTOMERPHOTOParameter = cUSTOMERPHOTO != null ?
                new ObjectParameter("CUSTOMERPHOTO", cUSTOMERPHOTO) :
                new ObjectParameter("CUSTOMERPHOTO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADDCUSTOMER", cUSTOMERNAMEParameter, cUSTOMERSURNAMEParameter, cUSTOMEREMAILParameter, cUSTOMERPASSWORDParameter, cUSTOMERCITYParameter, cUSTOMERPHOTOParameter);
        }
    
        public virtual int ADDPRODUCT(string cATEGORYNAME, string pRODUCTCODE, string pRODUCTNAME, Nullable<short> pRODUCTVOLUME, string uNIT, Nullable<short> sELLERID, Nullable<short> sTOCKNUMBER, Nullable<decimal> pRICE, string pHOTO)
        {
            var cATEGORYNAMEParameter = cATEGORYNAME != null ?
                new ObjectParameter("CATEGORYNAME", cATEGORYNAME) :
                new ObjectParameter("CATEGORYNAME", typeof(string));
    
            var pRODUCTCODEParameter = pRODUCTCODE != null ?
                new ObjectParameter("PRODUCTCODE", pRODUCTCODE) :
                new ObjectParameter("PRODUCTCODE", typeof(string));
    
            var pRODUCTNAMEParameter = pRODUCTNAME != null ?
                new ObjectParameter("PRODUCTNAME", pRODUCTNAME) :
                new ObjectParameter("PRODUCTNAME", typeof(string));
    
            var pRODUCTVOLUMEParameter = pRODUCTVOLUME.HasValue ?
                new ObjectParameter("PRODUCTVOLUME", pRODUCTVOLUME) :
                new ObjectParameter("PRODUCTVOLUME", typeof(short));
    
            var uNITParameter = uNIT != null ?
                new ObjectParameter("UNIT", uNIT) :
                new ObjectParameter("UNIT", typeof(string));
    
            var sELLERIDParameter = sELLERID.HasValue ?
                new ObjectParameter("SELLERID", sELLERID) :
                new ObjectParameter("SELLERID", typeof(short));
    
            var sTOCKNUMBERParameter = sTOCKNUMBER.HasValue ?
                new ObjectParameter("STOCKNUMBER", sTOCKNUMBER) :
                new ObjectParameter("STOCKNUMBER", typeof(short));
    
            var pRICEParameter = pRICE.HasValue ?
                new ObjectParameter("PRICE", pRICE) :
                new ObjectParameter("PRICE", typeof(decimal));
    
            var pHOTOParameter = pHOTO != null ?
                new ObjectParameter("PHOTO", pHOTO) :
                new ObjectParameter("PHOTO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADDPRODUCT", cATEGORYNAMEParameter, pRODUCTCODEParameter, pRODUCTNAMEParameter, pRODUCTVOLUMEParameter, uNITParameter, sELLERIDParameter, sTOCKNUMBERParameter, pRICEParameter, pHOTOParameter);
        }
    
        public virtual int ADDSALES(string sELLERNAME, string sELLERSURNAME, string cUSTOMERNAME, string cUSTOMERSURNAME, Nullable<short> pRODUCTID, Nullable<byte> sALESNUMBER, Nullable<decimal> cOST)
        {
            var sELLERNAMEParameter = sELLERNAME != null ?
                new ObjectParameter("SELLERNAME", sELLERNAME) :
                new ObjectParameter("SELLERNAME", typeof(string));
    
            var sELLERSURNAMEParameter = sELLERSURNAME != null ?
                new ObjectParameter("SELLERSURNAME", sELLERSURNAME) :
                new ObjectParameter("SELLERSURNAME", typeof(string));
    
            var cUSTOMERNAMEParameter = cUSTOMERNAME != null ?
                new ObjectParameter("CUSTOMERNAME", cUSTOMERNAME) :
                new ObjectParameter("CUSTOMERNAME", typeof(string));
    
            var cUSTOMERSURNAMEParameter = cUSTOMERSURNAME != null ?
                new ObjectParameter("CUSTOMERSURNAME", cUSTOMERSURNAME) :
                new ObjectParameter("CUSTOMERSURNAME", typeof(string));
    
            var pRODUCTIDParameter = pRODUCTID.HasValue ?
                new ObjectParameter("PRODUCTID", pRODUCTID) :
                new ObjectParameter("PRODUCTID", typeof(short));
    
            var sALESNUMBERParameter = sALESNUMBER.HasValue ?
                new ObjectParameter("SALESNUMBER", sALESNUMBER) :
                new ObjectParameter("SALESNUMBER", typeof(byte));
    
            var cOSTParameter = cOST.HasValue ?
                new ObjectParameter("COST", cOST) :
                new ObjectParameter("COST", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADDSALES", sELLERNAMEParameter, sELLERSURNAMEParameter, cUSTOMERNAMEParameter, cUSTOMERSURNAMEParameter, pRODUCTIDParameter, sALESNUMBERParameter, cOSTParameter);
        }
    
        public virtual int ADDSELLER(string sELLERNAME, string sELLERSURNAME, string sELLEREMAIL, string sELLERPASSWORD, string sELLERCITY, string sELLERPHOTO)
        {
            var sELLERNAMEParameter = sELLERNAME != null ?
                new ObjectParameter("SELLERNAME", sELLERNAME) :
                new ObjectParameter("SELLERNAME", typeof(string));
    
            var sELLERSURNAMEParameter = sELLERSURNAME != null ?
                new ObjectParameter("SELLERSURNAME", sELLERSURNAME) :
                new ObjectParameter("SELLERSURNAME", typeof(string));
    
            var sELLEREMAILParameter = sELLEREMAIL != null ?
                new ObjectParameter("SELLEREMAIL", sELLEREMAIL) :
                new ObjectParameter("SELLEREMAIL", typeof(string));
    
            var sELLERPASSWORDParameter = sELLERPASSWORD != null ?
                new ObjectParameter("SELLERPASSWORD", sELLERPASSWORD) :
                new ObjectParameter("SELLERPASSWORD", typeof(string));
    
            var sELLERCITYParameter = sELLERCITY != null ?
                new ObjectParameter("SELLERCITY", sELLERCITY) :
                new ObjectParameter("SELLERCITY", typeof(string));
    
            var sELLERPHOTOParameter = sELLERPHOTO != null ?
                new ObjectParameter("SELLERPHOTO", sELLERPHOTO) :
                new ObjectParameter("SELLERPHOTO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADDSELLER", sELLERNAMEParameter, sELLERSURNAMEParameter, sELLEREMAILParameter, sELLERPASSWORDParameter, sELLERCITYParameter, sELLERPHOTOParameter);
        }
    
        public virtual int DELETECUSTOMER(Nullable<short> cUSTOMERID)
        {
            var cUSTOMERIDParameter = cUSTOMERID.HasValue ?
                new ObjectParameter("CUSTOMERID", cUSTOMERID) :
                new ObjectParameter("CUSTOMERID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETECUSTOMER", cUSTOMERIDParameter);
        }
    
        public virtual int DELETEPRODUCT(Nullable<short> pRODUCTID)
        {
            var pRODUCTIDParameter = pRODUCTID.HasValue ?
                new ObjectParameter("PRODUCTID", pRODUCTID) :
                new ObjectParameter("PRODUCTID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETEPRODUCT", pRODUCTIDParameter);
        }
    
        public virtual int DELETESELLER(Nullable<short> sELLERID)
        {
            var sELLERIDParameter = sELLERID.HasValue ?
                new ObjectParameter("SELLERID", sELLERID) :
                new ObjectParameter("SELLERID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETESELLER", sELLERIDParameter);
        }
    
        public virtual ObjectResult<string> LISTCATEGORY()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("LISTCATEGORY");
        }
    
        public virtual ObjectResult<LISTCUSTOMER_Result> LISTCUSTOMER()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LISTCUSTOMER_Result>("LISTCUSTOMER");
        }
    
        public virtual ObjectResult<LISTNOTFSELLER_Result> LISTNOTFSELLER(string sELLERNAME, string sELLERSURNAME)
        {
            var sELLERNAMEParameter = sELLERNAME != null ?
                new ObjectParameter("SELLERNAME", sELLERNAME) :
                new ObjectParameter("SELLERNAME", typeof(string));
    
            var sELLERSURNAMEParameter = sELLERSURNAME != null ?
                new ObjectParameter("SELLERSURNAME", sELLERSURNAME) :
                new ObjectParameter("SELLERSURNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LISTNOTFSELLER_Result>("LISTNOTFSELLER", sELLERNAMEParameter, sELLERSURNAMEParameter);
        }
    
        public virtual ObjectResult<LISTPRODUCTACTIVE_Result> LISTPRODUCTACTIVE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LISTPRODUCTACTIVE_Result>("LISTPRODUCTACTIVE");
        }
    
        public virtual ObjectResult<LISTPRODUCTALL_Result> LISTPRODUCTALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LISTPRODUCTALL_Result>("LISTPRODUCTALL");
        }
    
        public virtual ObjectResult<LISTSALES_Result> LISTSALES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LISTSALES_Result>("LISTSALES");
        }
    
        public virtual ObjectResult<LISTSALESFORCUSTOMER_Result> LISTSALESFORCUSTOMER(string cUSTOMERNAME, string cUSTOMERSURNAME)
        {
            var cUSTOMERNAMEParameter = cUSTOMERNAME != null ?
                new ObjectParameter("CUSTOMERNAME", cUSTOMERNAME) :
                new ObjectParameter("CUSTOMERNAME", typeof(string));
    
            var cUSTOMERSURNAMEParameter = cUSTOMERSURNAME != null ?
                new ObjectParameter("CUSTOMERSURNAME", cUSTOMERSURNAME) :
                new ObjectParameter("CUSTOMERSURNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LISTSALESFORCUSTOMER_Result>("LISTSALESFORCUSTOMER", cUSTOMERNAMEParameter, cUSTOMERSURNAMEParameter);
        }
    
        public virtual ObjectResult<LISTSALESFORSELLER_Result> LISTSALESFORSELLER(string sELLERNAME, string sELLERSURNAME)
        {
            var sELLERNAMEParameter = sELLERNAME != null ?
                new ObjectParameter("SELLERNAME", sELLERNAME) :
                new ObjectParameter("SELLERNAME", typeof(string));
    
            var sELLERSURNAMEParameter = sELLERSURNAME != null ?
                new ObjectParameter("SELLERSURNAME", sELLERSURNAME) :
                new ObjectParameter("SELLERSURNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LISTSALESFORSELLER_Result>("LISTSALESFORSELLER", sELLERNAMEParameter, sELLERSURNAMEParameter);
        }
    
        public virtual ObjectResult<LISTSELLER_Result> LISTSELLER()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LISTSELLER_Result>("LISTSELLER");
        }
    
        public virtual int READNOTIFICATION(Nullable<short> nOTFID)
        {
            var nOTFIDParameter = nOTFID.HasValue ?
                new ObjectParameter("NOTFID", nOTFID) :
                new ObjectParameter("NOTFID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("READNOTIFICATION", nOTFIDParameter);
        }
    
        public virtual ObjectResult<SEARCHCUSTOMER_Result> SEARCHCUSTOMER(string sEARCH)
        {
            var sEARCHParameter = sEARCH != null ?
                new ObjectParameter("SEARCH", sEARCH) :
                new ObjectParameter("SEARCH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SEARCHCUSTOMER_Result>("SEARCHCUSTOMER", sEARCHParameter);
        }
    
        public virtual ObjectResult<SEARCHPRODUCT_Result> SEARCHPRODUCT(string sEARCH)
        {
            var sEARCHParameter = sEARCH != null ?
                new ObjectParameter("SEARCH", sEARCH) :
                new ObjectParameter("SEARCH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SEARCHPRODUCT_Result>("SEARCHPRODUCT", sEARCHParameter);
        }
    
        public virtual ObjectResult<SEARCHSELLER_Result> SEARCHSELLER(string sEARCH)
        {
            var sEARCHParameter = sEARCH != null ?
                new ObjectParameter("SEARCH", sEARCH) :
                new ObjectParameter("SEARCH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SEARCHSELLER_Result>("SEARCHSELLER", sEARCHParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
